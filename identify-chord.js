/* jshint browser:true */
/*global Audio: false */

// TODO: If the program finds one quality name for an integer permutation of a chord, it only lists that first one. If there are chords that have the same octave-compressed integer chord pattern, the program won't display both. At the time of writing this, the only pair of chords like that is "Maj9sus4" and "m-Maj7add11", which are both listed as having a compressed integer chord pattern of "0.3.5.7.11". Maybe that's a mistake? Or maybe when your chords get weird enough, that happens. Either way, fix the bug.

// TODO: Don't duplicate the interval patterns. Write them once and reference that from many places. Also, derive the compressed patterns from the interval patterns. Don't hard code them.

// TODO: Add flat pitch-classes to the piano roll.

// TODO: Add a button for clearing all the pitch-class buttons to the off-state.

// TODO: Allow for text input of pitches.

var integer_chord_patterns = {
		"5" : [0, 7],
		"Major" : [0, 4, 7],
		"Majb5" :  [0, 4, 6],
		"Minor" : [0, 3, 7],
		"dim" : [0, 3, 6],
		"sus2" : [0, 2, 7],
		"sus4" : [0, 5, 7],
		"aug" : [0, 4, 8],
		"augsus4" : [0, 5, 8],
		"dim7" : [0, 3, 6, 9],
		"6" : [0, 4, 7, 9],
		"6b5" : [0, 4, 6, 9],
		"6sus4" : [0, 5, 7, 9],
		"6add9" : [0, 4, 7, 9, 14],
		"m6" : [0, 3, 7, 9],
		"m6add9" : [0, 3, 7, 9, 14],
		"7" : [0, 4, 7, 10],
		"7sus4" : [0, 5, 7, 10],
		"7#5" : [0, 4, 8, 10],
		"7b5" : [0, 4, 6, 10],
		"7#9" : [0, 4, 7, 10, 15],
		"7b9" : [0, 4, 7, 10, 13],
		"7b13" : [0, 4, 7, 10, 20],
		"7#5#9" : [0, 4, 8, 10, 15],
		"7#5b9" : [0, 4, 8, 10, 13],
		"7b5b9" : [0, 4, 6, 10, 13],
		"7add11" : [0, 4, 7, 10, 17],
		"7add13" : [0, 4, 7, 10, 21],
		"7#11" : [0, 4, 7, 10, 18],
		"Maj7" : [0, 4, 7, 11],
		"Maj7b5" : [0, 4, 6, 11],
		"Maj7#5" : [0, 4, 8, 11],
		"Maj7#11" : [0, 4, 7, 11, 18],
		"Maj7add13" : [0, 4, 7, 11, 21],
		"m7" : [0, 3, 7, 10],
		"m7b5" : [0, 3, 6, 10],
		"m7b9" : [0, 3, 7, 10, 13],
		"m7add11" : [0, 3, 7, 10, 17],
		"m7add13" : [0, 3, 7, 10, 21],
		"m-Maj7" : [0, 3, 7, 11],
		"m-Maj7add11" : [0, 3, 7, 11, 17],
		"m-Maj7add13" : [0, 3, 7, 11, 21],
		"9" : [0, 4, 7, 10, 14],
		"9sus4" : [0, 5, 7, 10, 14],
		"add9" : [0, 4, 7, 14],
		"9#5" : [0, 4, 8, 10, 14],
		"9b5" : [0, 4, 6, 10, 14],
		"9#11" : [0, 4, 7, 10, 14, 18],
		"9b13" : [0, 4, 7, 10, 14, 20],
		"Maj9" : [0, 4, 7, 11, 14],
		"Maj9sus4" : [0, 5, 7, 11, 15],
		"Maj9#5" : [0, 4, 8, 11, 14],
		"Maj9#11" : [0, 4, 7, 11, 14, 18],
		"m9" : [0, 3, 7, 10, 14],
		"madd9" : [0, 3, 7, 14],
		"m9b5" : [0, 3, 6, 10, 14],
		"m9-Maj7" : [0, 3, 7, 11, 14],
		"11" : [0, 4, 7, 10, 14, 17],
		"11b9" : [0, 4, 7, 10, 13, 17],
		"Maj11" : [0, 4, 7, 11, 14, 17],
		"m11" : [0, 3, 7, 10, 14, 17],
		"m-Maj11" : [0, 3, 7, 11, 14, 17],
		"13" : [0, 4, 7, 10, 14, 17, 21],
		"13#9" : [0, 4, 7, 10, 15, 21],
		"13b9" : [0, 4, 7, 10, 13, 21],
		"13b5b9" : [0, 4, 6, 10, 13, 21],
		"13(no 5, no 11)" : [0, 4, 10, 14, 21],
		"Maj13" : [0, 4, 7, 11, 14, 21],
		"m9add13" : [0, 2, 3, 7, 9, 10],
		"m13" : [0, 3, 7, 10, 14, 17, 21],
		"m-Maj13" : [0, 3, 7, 11, 14, 21],
"maj": [0, 4, 7],
"maj(add13)": [0, 4, 7, 21],
"majb13": [0, 4, 7, 20],
"maj#11": [0, 4, 7, 18],
"maj#11(add13)": [0, 4, 7, 18, 21],
"maj#11b13": [0, 4, 7, 18, 20],
"maj(add11)": [0, 4, 7, 17],
"maj(add11)(add13)": [0, 4, 7, 17, 21],
"maj(add11)b13": [0, 4, 7, 17, 20],
"maj#9": [0, 4, 7, 15],
"maj#9(add13)": [0, 4, 7, 15, 21],
"maj#9b13": [0, 4, 7, 15, 20],
"maj#9#11": [0, 4, 7, 15, 18],
"maj#9#11(add13)": [0, 4, 7, 15, 18, 21],
"maj#9#11b13": [0, 4, 7, 15, 18, 20],
"maj#9(add11)": [0, 4, 7, 15, 17],
"maj#9(add11)(add13)": [0, 4, 7, 15, 17, 21],
"maj#9(add11)b13": [0, 4, 7, 15, 17, 20],
"maj(add9)": [0, 4, 7, 14],
"maj(add9)(add13)": [0, 4, 7, 14, 21],
"maj(add9)b13": [0, 4, 7, 14, 20],
"maj(add9)#11": [0, 4, 7, 14, 18],
"maj(add9)#11(add13)": [0, 4, 7, 14, 18, 21],
"maj(add9)#11b13": [0, 4, 7, 14, 18, 20],
"maj(add9)(add11)": [0, 4, 7, 14, 17],
"maj(add9)(add11)(add13)": [0, 4, 7, 14, 17, 21],
"maj(add9)(add11)b13": [0, 4, 7, 14, 17, 20],
"majb9": [0, 4, 7, 13],
"majb9(add13)": [0, 4, 7, 13, 21],
"majb9b13": [0, 4, 7, 13, 20],
"majb9#11": [0, 4, 7, 13, 18],
"majb9#11(add13)": [0, 4, 7, 13, 18, 21],
"majb9#11b13": [0, 4, 7, 13, 18, 20],
"majb9(add11)": [0, 4, 7, 13, 17],
"majb9(add11)(add13)": [0, 4, 7, 13, 17, 21],
"majb9(add11)b13": [0, 4, 7, 13, 17, 20],
"maj7": [0, 4, 7, 11],
"maj7(add13)": [0, 4, 7, 11, 21],
"maj7b13": [0, 4, 7, 11, 20],
"maj7#11": [0, 4, 7, 11, 18],
"maj7#11(add13)": [0, 4, 7, 11, 18, 21],
"maj7#11b13": [0, 4, 7, 11, 18, 20],
"maj7(add11)": [0, 4, 7, 11, 17],
"maj7(add11)(add13)": [0, 4, 7, 11, 17, 21],
"maj7(add11)b13": [0, 4, 7, 11, 17, 20],
"maj7#9": [0, 4, 7, 11, 15],
"maj7#9(add13)": [0, 4, 7, 11, 15, 21],
"maj7#9b13": [0, 4, 7, 11, 15, 20],
"maj7#9#11": [0, 4, 7, 11, 15, 18],
"maj13#9#11": [0, 4, 7, 11, 15, 18, 21],
"maj7#9#11b13": [0, 4, 7, 11, 15, 18, 20],
"maj11#9": [0, 4, 7, 11, 15, 17],
"maj13#9": [0, 4, 7, 11, 15, 17, 21],
"maj11#9b13": [0, 4, 7, 11, 15, 17, 20],
"maj9": [0, 4, 7, 11, 14],
"maj9(add13)": [0, 4, 7, 11, 14, 21],
"maj9b13": [0, 4, 7, 11, 14, 20],
"maj9#11": [0, 4, 7, 11, 14, 18],
"maj13#11": [0, 4, 7, 11, 14, 18, 21],
"maj9#11b13": [0, 4, 7, 11, 14, 18, 20],
"maj11": [0, 4, 7, 11, 14, 17],
"maj13": [0, 4, 7, 11, 14, 17, 21],
"maj11b13": [0, 4, 7, 11, 14, 17, 20],
"maj7b9": [0, 4, 7, 11, 13],
"maj7b9(add13)": [0, 4, 7, 11, 13, 21],
"maj7b9b13": [0, 4, 7, 11, 13, 20],
"maj7b9#11": [0, 4, 7, 11, 13, 18],
"maj13b9#11": [0, 4, 7, 11, 13, 18, 21],
"maj7b9#11b13": [0, 4, 7, 11, 13, 18, 20],
"maj11b9": [0, 4, 7, 11, 13, 17],
"maj13b9": [0, 4, 7, 11, 13, 17, 21],
"maj11b9b13": [0, 4, 7, 11, 13, 17, 20],
"7": [0, 4, 7, 10],
"7(add13)": [0, 4, 7, 10, 21],
"7b13": [0, 4, 7, 10, 20],
"7#11": [0, 4, 7, 10, 18],
"7#11(add13)": [0, 4, 7, 10, 18, 21],
"7#11b13": [0, 4, 7, 10, 18, 20],
"7(add11)": [0, 4, 7, 10, 17],
"7(add11)(add13)": [0, 4, 7, 10, 17, 21],
"7(add11)b13": [0, 4, 7, 10, 17, 20],
"7#9": [0, 4, 7, 10, 15],
"7#9(add13)": [0, 4, 7, 10, 15, 21],
"7#9b13": [0, 4, 7, 10, 15, 20],
"7#9#11": [0, 4, 7, 10, 15, 18],
"13#9#11": [0, 4, 7, 10, 15, 18, 21],
"7#9#11b13": [0, 4, 7, 10, 15, 18, 20],
"11#9": [0, 4, 7, 10, 15, 17],
"13#9": [0, 4, 7, 10, 15, 17, 21],
"11#9b13": [0, 4, 7, 10, 15, 17, 20],
"9": [0, 4, 7, 10, 14],
"9(add13)": [0, 4, 7, 10, 14, 21],
"9b13": [0, 4, 7, 10, 14, 20],
"9#11": [0, 4, 7, 10, 14, 18],
"13#11": [0, 4, 7, 10, 14, 18, 21],
"9#11b13": [0, 4, 7, 10, 14, 18, 20],
"11": [0, 4, 7, 10, 14, 17],
"13": [0, 4, 7, 10, 14, 17, 21],
"11b13": [0, 4, 7, 10, 14, 17, 20],
"7b9": [0, 4, 7, 10, 13],
"7b9(add13)": [0, 4, 7, 10, 13, 21],
"7b9b13": [0, 4, 7, 10, 13, 20],
"7b9#11": [0, 4, 7, 10, 13, 18],
"13b9#11": [0, 4, 7, 10, 13, 18, 21],
"7b9#11b13": [0, 4, 7, 10, 13, 18, 20],
"11b9": [0, 4, 7, 10, 13, 17],
"13b9": [0, 4, 7, 10, 13, 17, 21],
"11b9b13": [0, 4, 7, 10, 13, 17, 20],
"m": [0, 3, 7],
"m(add13)": [0, 3, 7, 21],
"mb13": [0, 3, 7, 20],
"m#11": [0, 3, 7, 18],
"m#11(add13)": [0, 3, 7, 18, 21],
"m#11b13": [0, 3, 7, 18, 20],
"m(add11)": [0, 3, 7, 17],
"m(add11)(add13)": [0, 3, 7, 17, 21],
"m(add11)b13": [0, 3, 7, 17, 20],
"m#9": [0, 3, 7, 15],
"m#9(add13)": [0, 3, 7, 15, 21],
"m#9b13": [0, 3, 7, 15, 20],
"m#9#11": [0, 3, 7, 15, 18],
"m#9#11(add13)": [0, 3, 7, 15, 18, 21],
"m#9#11b13": [0, 3, 7, 15, 18, 20],
"m#9(add11)": [0, 3, 7, 15, 17],
"m#9(add11)(add13)": [0, 3, 7, 15, 17, 21],
"m#9(add11)b13": [0, 3, 7, 15, 17, 20],
"m(add9)": [0, 3, 7, 14],
"m(add9)(add13)": [0, 3, 7, 14, 21],
"m(add9)b13": [0, 3, 7, 14, 20],
"m(add9)#11": [0, 3, 7, 14, 18],
"m(add9)#11(add13)": [0, 3, 7, 14, 18, 21],
"m(add9)#11b13": [0, 3, 7, 14, 18, 20],
"m(add9)(add11)": [0, 3, 7, 14, 17],
"m(add9)(add11)(add13)": [0, 3, 7, 14, 17, 21],
"m(add9)(add11)b13": [0, 3, 7, 14, 17, 20],
"mb9": [0, 3, 7, 13],
"mb9(add13)": [0, 3, 7, 13, 21],
"mb9b13": [0, 3, 7, 13, 20],
"mb9#11": [0, 3, 7, 13, 18],
"mb9#11(add13)": [0, 3, 7, 13, 18, 21],
"mb9#11b13": [0, 3, 7, 13, 18, 20],
"mb9(add11)": [0, 3, 7, 13, 17],
"mb9(add11)(add13)": [0, 3, 7, 13, 17, 21],
"mb9(add11)b13": [0, 3, 7, 13, 17, 20],
"mmaj7": [0, 3, 7, 11],
"mmaj7(add13)": [0, 3, 7, 11, 21],
"mmaj7b13": [0, 3, 7, 11, 20],
"mmaj7#11": [0, 3, 7, 11, 18],
"mmaj7#11(add13)": [0, 3, 7, 11, 18, 21],
"mmaj7#11b13": [0, 3, 7, 11, 18, 20],
"mmaj7(add11)": [0, 3, 7, 11, 17],
"mmaj7(add11)(add13)": [0, 3, 7, 11, 17, 21],
"mmaj7(add11)b13": [0, 3, 7, 11, 17, 20],
"mmaj7#9": [0, 3, 7, 11, 15],
"mmaj7#9(add13)": [0, 3, 7, 11, 15, 21],
"mmaj7#9b13": [0, 3, 7, 11, 15, 20],
"mmaj7#9#11": [0, 3, 7, 11, 15, 18],
"mmaj13#9#11": [0, 3, 7, 11, 15, 18, 21],
"mmaj7#9#11b13": [0, 3, 7, 11, 15, 18, 20],
"mmaj11#9": [0, 3, 7, 11, 15, 17],
"mmaj13#9": [0, 3, 7, 11, 15, 17, 21],
"mmaj11#9b13": [0, 3, 7, 11, 15, 17, 20],
"mmaj9": [0, 3, 7, 11, 14],
"mmaj9(add13)": [0, 3, 7, 11, 14, 21],
"mmaj9b13": [0, 3, 7, 11, 14, 20],
"mmaj9#11": [0, 3, 7, 11, 14, 18],
"mmaj13#11": [0, 3, 7, 11, 14, 18, 21],
"mmaj9#11b13": [0, 3, 7, 11, 14, 18, 20],
"mmaj11": [0, 3, 7, 11, 14, 17],
"mmaj13": [0, 3, 7, 11, 14, 17, 21],
"mmaj11b13": [0, 3, 7, 11, 14, 17, 20],
"mmaj7b9": [0, 3, 7, 11, 13],
"mmaj7b9(add13)": [0, 3, 7, 11, 13, 21],
"mmaj7b9b13": [0, 3, 7, 11, 13, 20],
"mmaj7b9#11": [0, 3, 7, 11, 13, 18],
"mmaj13b9#11": [0, 3, 7, 11, 13, 18, 21],
"mmaj7b9#11b13": [0, 3, 7, 11, 13, 18, 20],
"mmaj11b9": [0, 3, 7, 11, 13, 17],
"mmaj13b9": [0, 3, 7, 11, 13, 17, 21],
"mmaj11b9b13": [0, 3, 7, 11, 13, 17, 20],
"m7": [0, 3, 7, 10],
"m7(add13)": [0, 3, 7, 10, 21],
"m7b13": [0, 3, 7, 10, 20],
"m7#11": [0, 3, 7, 10, 18],
"m7#11(add13)": [0, 3, 7, 10, 18, 21],
"m7#11b13": [0, 3, 7, 10, 18, 20],
"m7(add11)": [0, 3, 7, 10, 17],
"m7(add11)(add13)": [0, 3, 7, 10, 17, 21],
"m7(add11)b13": [0, 3, 7, 10, 17, 20],
"m7#9": [0, 3, 7, 10, 15],
"m7#9(add13)": [0, 3, 7, 10, 15, 21],
"m7#9b13": [0, 3, 7, 10, 15, 20],
"m7#9#11": [0, 3, 7, 10, 15, 18],
"m13#9#11": [0, 3, 7, 10, 15, 18, 21],
"m7#9#11b13": [0, 3, 7, 10, 15, 18, 20],
"m11#9": [0, 3, 7, 10, 15, 17],
"m13#9": [0, 3, 7, 10, 15, 17, 21],
"m11#9b13": [0, 3, 7, 10, 15, 17, 20],
"m9": [0, 3, 7, 10, 14],
"m9(add13)": [0, 3, 7, 10, 14, 21],
"m9b13": [0, 3, 7, 10, 14, 20],
"m9#11": [0, 3, 7, 10, 14, 18],
"m13#11": [0, 3, 7, 10, 14, 18, 21],
"m9#11b13": [0, 3, 7, 10, 14, 18, 20],
"m11": [0, 3, 7, 10, 14, 17],
"m13": [0, 3, 7, 10, 14, 17, 21],
"m11b13": [0, 3, 7, 10, 14, 17, 20],
"m7b9": [0, 3, 7, 10, 13],
"m7b9(add13)": [0, 3, 7, 10, 13, 21],
"m7b9b13": [0, 3, 7, 10, 13, 20],
"m7b9#11": [0, 3, 7, 10, 13, 18],
"m13b9#11": [0, 3, 7, 10, 13, 18, 21],
"m7b9#11b13": [0, 3, 7, 10, 13, 18, 20],
"m11b9": [0, 3, 7, 10, 13, 17],
"m13b9": [0, 3, 7, 10, 13, 17, 21],
"m11b9b13": [0, 3, 7, 10, 13, 17, 20],
	};

function hide_chord_table() {
	"use strict";
	var table = document.getElementById("output_table");
	table.innerHTML = "";
}

function display_chords(chords) {
	"use strict";
	
	var table = document.getElementById("output_table");
	var table_text ;
	
	if (chords.length > 0) {
		table_text = "<thead><tr><td>Chord Name</td><td>Rooted Pattern</td></tr></thead><tbody>";
	
		var i, tonic, quality, pattern, chord_text;
		for (i = 0; i < chords.length; i++) {
			tonic = chords[i].tonic;
			quality = chords[i].quality;
			chord_text = tonic_and_quality_to_chord(tonic, quality).join(" &bull; ");
			table_text += "<tr><td>" + tonic + quality + "</td><td>" + chord_text + "</td></tr>";
		}
		
		table_text += "</tbody>";
	} else {
		table_text = "This chord has no common name.";
	}
	
	table.innerHTML = table_text;
}

function tonic_and_quality_to_chord(tonic, quality) {
	"use strict";
	var pattern = integer_chord_patterns[quality];
	window.console.log(pattern, quality);
	
	var chromatic_octave = ["G#", "A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G"];
	// window.alert(quality);
	// window.alert(pattern);
	var chromatic_indices = { "G#": 0, "A": 1, "A#": 2, "B": 3,
		"C": 4, "C#": 5, "D": 6, "D#": 7, "E": 8, "F": 9, "F#": 10,
		"G": 11};
	
	var tonic_index = chromatic_indices[tonic];
	var modulated_pattern = [];
	var i;
	for (i = 0; i < pattern.length; i++) {
		modulated_pattern.push((tonic_index + pattern[i]) % 12);
	}
	
	var chord_notes = [];
	var note;
	for (i = 0; i < modulated_pattern.length; i++) {
		note = chromatic_octave[modulated_pattern[i]];
		chord_notes.push(note);
		
	}
	
	
	return chord_notes;
}

function notes_to_indices(notes) {
	var chromatic_indices = { "G#": 0, "A": 1, "A#": 2, "B": 3,
		"C": 4, "C#": 5, "D": 6, "D#": 7, "E": 8, "F": 9, "F#": 10,
		"G": 11};
	
	var i;
	var indices = [];
	
	for (i = 0; i < notes.length; i++) {
		indices.push(chromatic_indices[notes[i]]);
	}
	
	return indices;
}

function read_chord() {
	"use strict";
	var boxes = document.querySelectorAll("#checkbox_container > input[type='checkbox']");
	var i;
	var notes = [];
	
	for (i = 0; i < boxes.length; i++) {
		if (boxes[i].checked === true) {
			notes.push(boxes[i].dataset.pitch);
		}
	}
	
	if (notes.length > 2) {
		var indices = notes_to_indices(notes);
		indices = naturalize_chord_pattern(indices);
		var chords = [];
		var quality, tonic;
		var chord;
		
		for (i = 0; i < indices.length; i++) {
			quality = indices_to_chord_quality(indices);
			window.console.log(indices, quality);
			
			if (quality != undefined) {
				tonic = notes[0];
				chord = {tonic: tonic, quality: quality};
				chords.push(chord);
			}
			
			indices = cycle_permute(indices);
			notes = cycle_permute(notes);
			indices = naturalize_chord_pattern(indices);
		}
		
		display_chords(chords);
	} else {
		hide_chord_table();
	}

	
}

function remove_octaves(notes) {
	"use strict";
	var i, note;
	var array = [];
	for (i = 0; i < notes.length; i++) {
		note = notes[i];
		note = note.slice(0, note.length - 1);
		array.push(note);
	}
	
	return array;
}

function generate_pattern_strings() {
	"use strict";
	var integer_chord_patterns = {
		"5" : [0, 7],
		"Major" : [0, 4, 7],
		"Majb5" :  [0, 4, 6],
		"Minor" : [0, 3, 7],
		"minb5" : [0, 3, 6],
		"sus2" : [0, 2, 7],
		"sus4" : [0, 5, 7],
		"aug" : [0, 4, 8],
		"augsus4" : [0, 5, 8],
		"tri" : [0, 3, 6, 9],
		"6" : [0, 4, 7, 9],
		"6b5" : [0, 4, 6, 9],
		"6sus4" : [0, 5, 7, 9],
		"6add9" : [0, 4, 7, 9, 14],
		"m6" : [0, 3, 7, 9],
		"m6add9" : [0, 3, 7, 9, 14],
		"7" : [0, 4, 7, 10],
		"7sus4" : [0, 5, 7, 10],
		"7#5" : [0, 4, 8, 10],
		"7b5" : [0, 4, 6, 10],
		"7#9" : [0, 4, 7, 10, 15],
		"7b9" : [0, 4, 7, 10, 13],
		"7b13" : [0, 4, 7, 10, 20],
		"7#5#9" : [0, 4, 8, 10, 15],
		"7#5b9" : [0, 4, 8, 10, 13],
		"7b5b9" : [0, 4, 6, 10, 13],
		"7add11" : [0, 4, 7, 10, 17],
		"7add13" : [0, 4, 7, 10, 21],
		"7#11" : [0, 4, 7, 10, 18],
		"Maj7" : [0, 4, 7, 11],
		"Maj7b5" : [0, 4, 6, 11],
		"Maj7#5" : [0, 4, 8, 11],
		"Maj7#11" : [0, 4, 7, 11, 18],
		"Maj7add13" : [0, 4, 7, 11, 21],
		"m7" : [0, 3, 7, 10],
		"m7b5" : [0, 3, 6, 10],
		"m7b9" : [0, 3, 7, 10, 13],
		"m7add11" : [0, 3, 7, 10, 17],
		"m7add13" : [0, 3, 7, 10, 21],
		"m-Maj7" : [0, 3, 7, 11],
		"m-Maj7add11" : [0, 3, 7, 11, 17],
		"m-Maj7add13" : [0, 3, 7, 11, 21],
		"9" : [0, 4, 7, 10, 14],
		"9sus4" : [0, 5, 7, 10, 14],
		"add9" : [0, 4, 7, 14],
		"9#5" : [0, 4, 8, 10, 14],
		"9b5" : [0, 4, 6, 10, 14],
		"9#11" : [0, 4, 7, 10, 14, 18],
		"9b13" : [0, 4, 7, 10, 14, 20],
		"Maj9" : [0, 4, 7, 11, 14],
		"Maj9sus4" : [0, 5, 7, 11, 15],
		"Maj9#5" : [0, 4, 8, 11, 14],
		"Maj9#11" : [0, 4, 7, 11, 14, 18],
		"m9" : [0, 3, 7, 10, 14],
		"madd9" : [0, 3, 7, 14],
		"m9b5" : [0, 3, 6, 10, 14],
		"m9-Maj7" : [0, 3, 7, 11, 14],
		"11" : [0, 4, 7, 10, 14, 17],
		"11b9" : [0, 4, 7, 10, 13, 17],
		"Maj11" : [0, 4, 7, 11, 14, 17],
		"m11" : [0, 3, 7, 10, 14, 17],
		"m-Maj11" : [0, 3, 7, 11, 14, 17],
		"13" : [0, 4, 7, 10, 14, 17, 21],
		"13#9" : [0, 4, 7, 10, 15, 21],
		"13b9" : [0, 4, 7, 10, 13, 21],
		"13b5b9" : [0, 4, 6, 10, 13, 21],
		"13(no 5, no 11)" : [0, 4, 10, 14, 21],
		"Maj13" : [0, 4, 7, 11, 14, 21],
		"m13" : [0, 3, 7, 10, 14, 17, 21],
		"m-Maj13" : [0, 3, 7, 11, 14, 21],
		"maj": [0, 4, 7],
		"maj(add13)": [0, 4, 7, 21],
		"majb13": [0, 4, 7, 20],
		"maj#11": [0, 4, 7, 18],
		"maj#11(add13)": [0, 4, 7, 18, 21],
		"maj#11b13": [0, 4, 7, 18, 20],
		"maj(add11)": [0, 4, 7, 17],
		"maj(add11)(add13)": [0, 4, 7, 17, 21],
		"maj(add11)b13": [0, 4, 7, 17, 20],
		"maj#9": [0, 4, 7, 15],
		"maj#9(add13)": [0, 4, 7, 15, 21],
		"maj#9b13": [0, 4, 7, 15, 20],
		"maj#9#11": [0, 4, 7, 15, 18],
		"maj#9#11(add13)": [0, 4, 7, 15, 18, 21],
		"maj#9#11b13": [0, 4, 7, 15, 18, 20],
		"maj#9(add11)": [0, 4, 7, 15, 17],
		"maj#9(add11)(add13)": [0, 4, 7, 15, 17, 21],
		"maj#9(add11)b13": [0, 4, 7, 15, 17, 20],
		"maj(add9)": [0, 4, 7, 14],
		"maj(add9)(add13)": [0, 4, 7, 14, 21],
		"maj(add9)b13": [0, 4, 7, 14, 20],
		"maj(add9)#11": [0, 4, 7, 14, 18],
		"maj(add9)#11(add13)": [0, 4, 7, 14, 18, 21],
		"maj(add9)#11b13": [0, 4, 7, 14, 18, 20],
		"maj(add9)(add11)": [0, 4, 7, 14, 17],
		"maj(add9)(add11)(add13)": [0, 4, 7, 14, 17, 21],
		"maj(add9)(add11)b13": [0, 4, 7, 14, 17, 20],
		"majb9": [0, 4, 7, 13],
		"majb9(add13)": [0, 4, 7, 13, 21],
		"majb9b13": [0, 4, 7, 13, 20],
		"majb9#11": [0, 4, 7, 13, 18],
		"majb9#11(add13)": [0, 4, 7, 13, 18, 21],
		"majb9#11b13": [0, 4, 7, 13, 18, 20],
		"majb9(add11)": [0, 4, 7, 13, 17],
		"majb9(add11)(add13)": [0, 4, 7, 13, 17, 21],
		"majb9(add11)b13": [0, 4, 7, 13, 17, 20],
		"maj7": [0, 4, 7, 11],
		"maj7(add13)": [0, 4, 7, 11, 21],
		"maj7b13": [0, 4, 7, 11, 20],
		"maj7#11": [0, 4, 7, 11, 18],
		"maj7#11(add13)": [0, 4, 7, 11, 18, 21],
		"maj7#11b13": [0, 4, 7, 11, 18, 20],
		"maj7(add11)": [0, 4, 7, 11, 17],
		"maj7(add11)(add13)": [0, 4, 7, 11, 17, 21],
		"maj7(add11)b13": [0, 4, 7, 11, 17, 20],
		"maj7#9": [0, 4, 7, 11, 15],
		"maj7#9(add13)": [0, 4, 7, 11, 15, 21],
		"maj7#9b13": [0, 4, 7, 11, 15, 20],
		"maj7#9#11": [0, 4, 7, 11, 15, 18],
		"maj13#9#11": [0, 4, 7, 11, 15, 18, 21],
		"maj7#9#11b13": [0, 4, 7, 11, 15, 18, 20],
		"maj11#9": [0, 4, 7, 11, 15, 17],
		"maj13#9": [0, 4, 7, 11, 15, 17, 21],
		"maj11#9b13": [0, 4, 7, 11, 15, 17, 20],
		"maj9": [0, 4, 7, 11, 14],
		"maj9(add13)": [0, 4, 7, 11, 14, 21],
		"maj9b13": [0, 4, 7, 11, 14, 20],
		"maj9#11": [0, 4, 7, 11, 14, 18],
		"maj13#11": [0, 4, 7, 11, 14, 18, 21],
		"maj9#11b13": [0, 4, 7, 11, 14, 18, 20],
		"maj11": [0, 4, 7, 11, 14, 17],
		"maj13": [0, 4, 7, 11, 14, 17, 21],
		"maj11b13": [0, 4, 7, 11, 14, 17, 20],
		"maj7b9": [0, 4, 7, 11, 13],
		"maj7b9(add13)": [0, 4, 7, 11, 13, 21],
		"maj7b9b13": [0, 4, 7, 11, 13, 20],
		"maj7b9#11": [0, 4, 7, 11, 13, 18],
		"maj13b9#11": [0, 4, 7, 11, 13, 18, 21],
		"maj7b9#11b13": [0, 4, 7, 11, 13, 18, 20],
		"maj11b9": [0, 4, 7, 11, 13, 17],
		"maj13b9": [0, 4, 7, 11, 13, 17, 21],
		"maj11b9b13": [0, 4, 7, 11, 13, 17, 20],
		"7": [0, 4, 7, 10],
		"7(add13)": [0, 4, 7, 10, 21],
		"7b13": [0, 4, 7, 10, 20],
		"7#11": [0, 4, 7, 10, 18],
		"7#11(add13)": [0, 4, 7, 10, 18, 21],
		"7#11b13": [0, 4, 7, 10, 18, 20],
		"7(add11)": [0, 4, 7, 10, 17],
		"7(add11)(add13)": [0, 4, 7, 10, 17, 21],
		"7(add11)b13": [0, 4, 7, 10, 17, 20],
		"7#9": [0, 4, 7, 10, 15],
		"7#9(add13)": [0, 4, 7, 10, 15, 21],
		"7#9b13": [0, 4, 7, 10, 15, 20],
		"7#9#11": [0, 4, 7, 10, 15, 18],
		"13#9#11": [0, 4, 7, 10, 15, 18, 21],
		"7#9#11b13": [0, 4, 7, 10, 15, 18, 20],
		"11#9": [0, 4, 7, 10, 15, 17],
		"13#9": [0, 4, 7, 10, 15, 17, 21],
		"11#9b13": [0, 4, 7, 10, 15, 17, 20],
		"9": [0, 4, 7, 10, 14],
		"9(add13)": [0, 4, 7, 10, 14, 21],
		"9b13": [0, 4, 7, 10, 14, 20],
		"9#11": [0, 4, 7, 10, 14, 18],
		"13#11": [0, 4, 7, 10, 14, 18, 21],
		"9#11b13": [0, 4, 7, 10, 14, 18, 20],
		"11": [0, 4, 7, 10, 14, 17],
		"13": [0, 4, 7, 10, 14, 17, 21],
		"11b13": [0, 4, 7, 10, 14, 17, 20],
		"7b9": [0, 4, 7, 10, 13],
		"7b9(add13)": [0, 4, 7, 10, 13, 21],
		"7b9b13": [0, 4, 7, 10, 13, 20],
		"7b9#11": [0, 4, 7, 10, 13, 18],
		"13b9#11": [0, 4, 7, 10, 13, 18, 21],
		"7b9#11b13": [0, 4, 7, 10, 13, 18, 20],
		"11b9": [0, 4, 7, 10, 13, 17],
		"13b9": [0, 4, 7, 10, 13, 17, 21],
		"11b9b13": [0, 4, 7, 10, 13, 17, 20],
		"m": [0, 3, 7],
		"m(add13)": [0, 3, 7, 21],
		"mb13": [0, 3, 7, 20],
		"m#11": [0, 3, 7, 18],
		"m#11(add13)": [0, 3, 7, 18, 21],
		"m#11b13": [0, 3, 7, 18, 20],
		"m(add11)": [0, 3, 7, 17],
		"m(add11)(add13)": [0, 3, 7, 17, 21],
		"m(add11)b13": [0, 3, 7, 17, 20],
		"m#9": [0, 3, 7, 15],
		"m#9(add13)": [0, 3, 7, 15, 21],
		"m#9b13": [0, 3, 7, 15, 20],
		"m#9#11": [0, 3, 7, 15, 18],
		"m#9#11(add13)": [0, 3, 7, 15, 18, 21],
		"m#9#11b13": [0, 3, 7, 15, 18, 20],
		"m#9(add11)": [0, 3, 7, 15, 17],
		"m#9(add11)(add13)": [0, 3, 7, 15, 17, 21],
		"m#9(add11)b13": [0, 3, 7, 15, 17, 20],
		"m(add9)": [0, 3, 7, 14],
		"m(add9)(add13)": [0, 3, 7, 14, 21],
		"m(add9)b13": [0, 3, 7, 14, 20],
		"m(add9)#11": [0, 3, 7, 14, 18],
		"m(add9)#11(add13)": [0, 3, 7, 14, 18, 21],
		"m(add9)#11b13": [0, 3, 7, 14, 18, 20],
		"m(add9)(add11)": [0, 3, 7, 14, 17],
		"m(add9)(add11)(add13)": [0, 3, 7, 14, 17, 21],
		"m(add9)(add11)b13": [0, 3, 7, 14, 17, 20],
		"mb9": [0, 3, 7, 13],
		"mb9(add13)": [0, 3, 7, 13, 21],
		"mb9b13": [0, 3, 7, 13, 20],
		"mb9#11": [0, 3, 7, 13, 18],
		"mb9#11(add13)": [0, 3, 7, 13, 18, 21],
		"mb9#11b13": [0, 3, 7, 13, 18, 20],
		"mb9(add11)": [0, 3, 7, 13, 17],
		"mb9(add11)(add13)": [0, 3, 7, 13, 17, 21],
		"mb9(add11)b13": [0, 3, 7, 13, 17, 20],
		"mmaj7": [0, 3, 7, 11],
		"mmaj7(add13)": [0, 3, 7, 11, 21],
		"mmaj7b13": [0, 3, 7, 11, 20],
		"mmaj7#11": [0, 3, 7, 11, 18],
		"mmaj7#11(add13)": [0, 3, 7, 11, 18, 21],
		"mmaj7#11b13": [0, 3, 7, 11, 18, 20],
		"mmaj7(add11)": [0, 3, 7, 11, 17],
		"mmaj7(add11)(add13)": [0, 3, 7, 11, 17, 21],
		"mmaj7(add11)b13": [0, 3, 7, 11, 17, 20],
		"mmaj7#9": [0, 3, 7, 11, 15],
		"mmaj7#9(add13)": [0, 3, 7, 11, 15, 21],
		"mmaj7#9b13": [0, 3, 7, 11, 15, 20],
		"mmaj7#9#11": [0, 3, 7, 11, 15, 18],
		"mmaj13#9#11": [0, 3, 7, 11, 15, 18, 21],
		"mmaj7#9#11b13": [0, 3, 7, 11, 15, 18, 20],
		"mmaj11#9": [0, 3, 7, 11, 15, 17],
		"mmaj13#9": [0, 3, 7, 11, 15, 17, 21],
		"mmaj11#9b13": [0, 3, 7, 11, 15, 17, 20],
		"mmaj9": [0, 3, 7, 11, 14],
		"mmaj9(add13)": [0, 3, 7, 11, 14, 21],
		"mmaj9b13": [0, 3, 7, 11, 14, 20],
		"mmaj9#11": [0, 3, 7, 11, 14, 18],
		"mmaj13#11": [0, 3, 7, 11, 14, 18, 21],
		"mmaj9#11b13": [0, 3, 7, 11, 14, 18, 20],
		"mmaj11": [0, 3, 7, 11, 14, 17],
		"mmaj13": [0, 3, 7, 11, 14, 17, 21],
		"mmaj11b13": [0, 3, 7, 11, 14, 17, 20],
		"mmaj7b9": [0, 3, 7, 11, 13],
		"mmaj7b9(add13)": [0, 3, 7, 11, 13, 21],
		"mmaj7b9b13": [0, 3, 7, 11, 13, 20],
		"mmaj7b9#11": [0, 3, 7, 11, 13, 18],
		"mmaj13b9#11": [0, 3, 7, 11, 13, 18, 21],
		"mmaj7b9#11b13": [0, 3, 7, 11, 13, 18, 20],
		"mmaj11b9": [0, 3, 7, 11, 13, 17],
		"mmaj13b9": [0, 3, 7, 11, 13, 17, 21],
		"mmaj11b9b13": [0, 3, 7, 11, 13, 17, 20],
		"m7": [0, 3, 7, 10],
		"m7(add13)": [0, 3, 7, 10, 21],
		"m7b13": [0, 3, 7, 10, 20],
		"m7#11": [0, 3, 7, 10, 18],
		"m7#11(add13)": [0, 3, 7, 10, 18, 21],
		"m7#11b13": [0, 3, 7, 10, 18, 20],
		"m7(add11)": [0, 3, 7, 10, 17],
		"m7(add11)(add13)": [0, 3, 7, 10, 17, 21],
		"m7(add11)b13": [0, 3, 7, 10, 17, 20],
		"m7#9": [0, 3, 7, 10, 15],
		"m7#9(add13)": [0, 3, 7, 10, 15, 21],
		"m7#9b13": [0, 3, 7, 10, 15, 20],
		"m7#9#11": [0, 3, 7, 10, 15, 18],
		"m13#9#11": [0, 3, 7, 10, 15, 18, 21],
		"m7#9#11b13": [0, 3, 7, 10, 15, 18, 20],
		"m11#9": [0, 3, 7, 10, 15, 17],
		"m13#9": [0, 3, 7, 10, 15, 17, 21],
		"m11#9b13": [0, 3, 7, 10, 15, 17, 20],
		"m9": [0, 3, 7, 10, 14],
		"m9(add13)": [0, 3, 7, 10, 14, 21],
		"m9b13": [0, 3, 7, 10, 14, 20],
		"m9#11": [0, 3, 7, 10, 14, 18],
		"m13#11": [0, 3, 7, 10, 14, 18, 21],
		"m9#11b13": [0, 3, 7, 10, 14, 18, 20],
		"m11": [0, 3, 7, 10, 14, 17],
		"m13": [0, 3, 7, 10, 14, 17, 21],
		"m11b13": [0, 3, 7, 10, 14, 17, 20],
		"m7b9": [0, 3, 7, 10, 13],
		"m7b9(add13)": [0, 3, 7, 10, 13, 21],
		"m7b9b13": [0, 3, 7, 10, 13, 20],
		"m7b9#11": [0, 3, 7, 10, 13, 18],
		"m13b9#11": [0, 3, 7, 10, 13, 18, 21],
		"m7b9#11b13": [0, 3, 7, 10, 13, 18, 20],
		"m11b9": [0, 3, 7, 10, 13, 17],
		"m13b9": [0, 3, 7, 10, 13, 17, 21],
		"m11b9b13": [0, 3, 7, 10, 13, 17, 20],
	};
	
	var keys = Object.keys(integer_chord_patterns);
	
	var i, key, chord, hash;
	for (i = 0; i < keys.length; i++) {
		key = keys[i];
		chord = integer_chord_patterns[key];
		hash = chord.join(".");
		document.body.innerHTML += '"' + hash + '": "' + key + '"<br />';
	}
}


function indices_to_chord_quality(indices) {
	"use strict";
	// Integer chord patterns, but compressed into one octave.
	var compressed_integer_chord_patterns = {
		"0.1.3.7.10": "m7b9",
		"0.1.4.5.7.10": "11b9",
		"0.1.4.6.10": "7b5b9",
		"0.1.4.6.9.10": "13b5b9",
		"0.1.4.7.10": "7b9",
		"0.1.4.7.9.10": "13b9",
		"0.1.4.8.10": "7#5b9",
		"0.2.3.5.7.10": "m11",
		"0.2.3.5.7.11": "m-Maj11",
		"0.2.3.6.10": "m9b5",
		"0.4.7.8.10": "7b13",
		"0.2.3.7": "madd9",
		"0.2.3.7.11": "m9-Maj7",
		"0.2.3.7.9": "m6add9",
		"0.2.3.7.10": "m9",
		"0.2.3.7.9.10": "m9add13",
		"0.2.3.5.7.9.10": "m13",
		"0.2.3.7.9.11": "m-Maj13",
		"0.2.4.5.7.10": "11",
		"0.2.4.5.7.11": "Maj11",
		"0.2.4.6.10": "9b5",
		"0.2.4.6.7": "7#11",
		"0.2.4.6.7.10": "9#11",
		"0.2.4.6.7.11": "Maj9#11",
		"0.2.4.7": "add9",
		"0.2.4.7.10": "9",
		"0.2.4.7.11": "Maj9",
		"0.2.4.7.8.10": "9b13",
		"0.2.4.7.9": "6add9",
		"0.2.4.5.7.9.10": "13",
		"0.2.4.9.10": "13(no 5, no 11)",
		"0.2.4.7.9.11": "Maj13",
		"0.2.4.8.10": "9#5",
		"0.2.4.8.11": "Maj9#5",
		"0.2.5.7.10": "9sus4",
		"0.2.7": "sus2",
		"0.3.4.7.10": "7#9",
		"0.3.4.7.9.10": "13#9",
		"0.3.4.8.10": "7#5#9",
		"0.3.5.7.10": "m7add11",
		"0.3.5.7.11": "Maj9sus4",
		"0.3.5.7.11": "m-Maj7add11",
		"0.3.6": "dim",
		"0.3.6.10": "m7b5",
		"0.3.6.9": "dim7",
		"0.3.7": "Minor",
		"0.3.7.10": "m7",
		"0.3.7.11": "m-Maj7",
		"0.3.7.9": "m6",
		"0.3.7.9.10": "m7add13",
		"0.3.7.9.11": "m-Maj7add13",
		"0.4.5.7.10": "7add11",
		"0.4.6": "Majb5",
		"0.4.6.10": "7b5",
		"0.4.6.11": "Maj7b5",
		"0.4.6.7.11": "Maj7#11",
		"0.4.7": "Major",
		"0.4.7.10": "7",
		"0.4.7.11": "Maj7",
		"0.4.7.9": "6",
		"0.4.6.9": "6b5",
		"0.4.7.9.10": "7add13",
		"0.4.7.9.11": "Maj7add13",
		"0.4.8": "aug",
		"0.4.8.10": "7#5",
		"0.4.8.11": "Maj7#5",
		"0.5.7": "sus4",
		"0.5.7.10": "7sus4",
		"0.5.7.9": "6sus4",
		"0.5.8": "augsus4",
		"0.7": "5",
"0.4.7": "maj",
"0.4.7.9": "maj(add13)",
"0.4.7.8": "majb13",
"0.4.6.7": "maj#11",
"0.4.6.7.9": "maj#11(add13)",
"0.4.6.7.8": "maj#11b13",
"0.4.5.7": "maj(add11)",
"0.4.5.7.9": "maj(add11)(add13)",
"0.4.5.7.8": "maj(add11)b13",
"0.3.4.7": "maj#9",
"0.3.4.7.9": "maj#9(add13)",
"0.3.4.7.8": "maj#9b13",
"0.3.4.6.7": "maj#9#11",
"0.3.4.6.7.9": "maj#9#11(add13)",
"0.3.4.6.7.8": "maj#9#11b13",
"0.3.4.5.7": "maj#9(add11)",
"0.3.4.5.7.9": "maj#9(add11)(add13)",
"0.3.4.5.7.8": "maj#9(add11)b13",
"0.2.4.7": "maj(add9)",
"0.2.4.7.9": "maj(add9)(add13)",
"0.2.4.7.8": "maj(add9)b13",
"0.2.4.6.7": "maj(add9)#11",
"0.2.4.6.7.9": "maj(add9)#11(add13)",
"0.2.4.6.7.8": "maj(add9)#11b13",
"0.2.4.5.7": "maj(add9)(add11)",
"0.2.4.5.7.9": "maj(add9)(add11)(add13)",
"0.2.4.5.7.8": "maj(add9)(add11)b13",
"0.1.4.7": "majb9",
"0.1.4.7.9": "majb9(add13)",
"0.1.4.7.8": "majb9b13",
"0.1.4.6.7": "majb9#11",
"0.1.4.6.7.9": "majb9#11(add13)",
"0.1.4.6.7.8": "majb9#11b13",
"0.1.4.5.7": "majb9(add11)",
"0.1.4.5.7.9": "majb9(add11)(add13)",
"0.1.4.5.7.8": "majb9(add11)b13",
"0.4.7.11": "maj7",
"0.4.7.9.11": "maj7(add13)",
"0.4.7.8.11": "maj7b13",
"0.4.6.7.11": "maj7#11",
"0.4.6.7.9.11": "maj7#11(add13)",
"0.4.6.7.8.11": "maj7#11b13",
"0.4.5.7.11": "maj7(add11)",
"0.4.5.7.9.11": "maj7(add11)(add13)",
"0.4.5.7.8.11": "maj7(add11)b13",
"0.3.4.7.11": "maj7#9",
"0.3.4.7.9.11": "maj7#9(add13)",
"0.3.4.7.8.11": "maj7#9b13",
"0.3.4.6.7.11": "maj7#9#11",
"0.3.4.6.7.9.11": "maj13#9#11",
"0.3.4.6.7.8.11": "maj7#9#11b13",
"0.3.4.5.7.11": "maj11#9",
"0.3.4.5.7.9.11": "maj13#9",
"0.3.4.5.7.8.11": "maj11#9b13",
"0.2.4.7.11": "maj9",
"0.2.4.7.9.11": "maj9(add13)",
"0.2.4.7.8.11": "maj9b13",
"0.2.4.6.7.11": "maj9#11",
"0.2.4.6.7.9.11": "maj13#11",
"0.2.4.6.7.8.11": "maj9#11b13",
"0.2.4.5.7.11": "maj11",
"0.2.4.5.7.9.11": "maj13",
"0.2.4.5.7.8.11": "maj11b13",
"0.1.4.7.11": "maj7b9",
"0.1.4.7.9.11": "maj7b9(add13)",
"0.1.4.7.8.11": "maj7b9b13",
"0.1.4.6.7.11": "maj7b9#11",
"0.1.4.6.7.9.11": "maj13b9#11",
"0.1.4.6.7.8.11": "maj7b9#11b13",
"0.1.4.5.7.11": "maj11b9",
"0.1.4.5.7.9.11": "maj13b9",
"0.1.4.5.7.8.11": "maj11b9b13",
"0.4.7.10": "7",
"0.4.7.9.10": "7(add13)",
"0.4.7.8.10": "7b13",
"0.4.6.7.10": "7#11",
"0.4.6.7.9.10": "7#11(add13)",
"0.4.6.7.8.10": "7#11b13",
"0.4.5.7.10": "7(add11)",
"0.4.5.7.9.10": "7(add11)(add13)",
"0.4.5.7.8.10": "7(add11)b13",
"0.3.4.7.10": "7#9",
"0.3.4.7.9.10": "7#9(add13)",
"0.3.4.7.8.10": "7#9b13",
"0.3.4.6.7.10": "7#9#11",
"0.3.4.6.7.9.10": "13#9#11",
"0.3.4.6.7.8.10": "7#9#11b13",
"0.3.4.5.7.10": "11#9",
"0.3.4.5.7.9.10": "13#9",
"0.3.4.5.7.8.10": "11#9b13",
"0.2.4.7.10": "9",
"0.2.4.7.9.10": "9(add13)",
"0.2.4.7.8.10": "9b13",
"0.2.4.6.7.10": "9#11",
"0.2.4.6.7.9.10": "13#11",
"0.2.4.6.7.8.10": "9#11b13",
"0.2.4.5.7.10": "11",
"0.2.4.5.7.9.10": "13",
"0.2.4.5.7.8.10": "11b13",
"0.1.4.7.10": "7b9",
"0.1.4.7.9.10": "7b9(add13)",
"0.1.4.7.8.10": "7b9b13",
"0.1.4.6.7.10": "7b9#11",
"0.1.4.6.7.9.10": "13b9#11",
"0.1.4.6.7.8.10": "7b9#11b13",
"0.1.4.5.7.10": "11b9",
"0.1.4.5.7.9.10": "13b9",
"0.1.4.5.7.8.10": "11b9b13",
"0.3.7": "m",
"0.3.7.9": "m(add13)",
"0.3.7.8": "mb13",
"0.3.6.7": "m#11",
"0.3.6.7.9": "m#11(add13)",
"0.3.6.7.8": "m#11b13",
"0.3.5.7": "m(add11)",
"0.3.5.7.9": "m(add11)(add13)",
"0.3.5.7.8": "m(add11)b13",
"0.3.3.7": "m#9",
"0.3.3.7.9": "m#9(add13)",
"0.3.3.7.8": "m#9b13",
"0.3.3.6.7": "m#9#11",
"0.3.3.6.7.9": "m#9#11(add13)",
"0.3.3.6.7.8": "m#9#11b13",
"0.3.3.5.7": "m#9(add11)",
"0.3.3.5.7.9": "m#9(add11)(add13)",
"0.3.3.5.7.8": "m#9(add11)b13",
"0.2.3.7": "m(add9)",
"0.2.3.7.9": "m(add9)(add13)",
"0.2.3.7.8": "m(add9)b13",
"0.2.3.6.7": "m(add9)#11",
"0.2.3.6.7.9": "m(add9)#11(add13)",
"0.2.3.6.7.8": "m(add9)#11b13",
"0.2.3.5.7": "m(add9)(add11)",
"0.2.3.5.7.9": "m(add9)(add11)(add13)",
"0.2.3.5.7.8": "m(add9)(add11)b13",
"0.1.3.7": "mb9",
"0.1.3.7.9": "mb9(add13)",
"0.1.3.7.8": "mb9b13",
"0.1.3.6.7": "mb9#11",
"0.1.3.6.7.9": "mb9#11(add13)",
"0.1.3.6.7.8": "mb9#11b13",
"0.1.3.5.7": "mb9(add11)",
"0.1.3.5.7.9": "mb9(add11)(add13)",
"0.1.3.5.7.8": "mb9(add11)b13",
"0.3.7.11": "mmaj7",
"0.3.7.9.11": "mmaj7(add13)",
"0.3.7.8.11": "mmaj7b13",
"0.3.6.7.11": "mmaj7#11",
"0.3.6.7.9.11": "mmaj7#11(add13)",
"0.3.6.7.8.11": "mmaj7#11b13",
"0.3.5.7.11": "mmaj7(add11)",
"0.3.5.7.9.11": "mmaj7(add11)(add13)",
"0.3.5.7.8.11": "mmaj7(add11)b13",
"0.3.3.7.11": "mmaj7#9",
"0.3.3.7.9.11": "mmaj7#9(add13)",
"0.3.3.7.8.11": "mmaj7#9b13",
"0.3.3.6.7.11": "mmaj7#9#11",
"0.3.3.6.7.9.11": "mmaj13#9#11",
"0.3.3.6.7.8.11": "mmaj7#9#11b13",
"0.3.3.5.7.11": "mmaj11#9",
"0.3.3.5.7.9.11": "mmaj13#9",
"0.3.3.5.7.8.11": "mmaj11#9b13",
"0.2.3.7.11": "mmaj9",
"0.2.3.7.9.11": "mmaj9(add13)",
"0.2.3.7.8.11": "mmaj9b13",
"0.2.3.6.7.11": "mmaj9#11",
"0.2.3.6.7.9.11": "mmaj13#11",
"0.2.3.6.7.8.11": "mmaj9#11b13",
"0.2.3.5.7.11": "mmaj11",
"0.2.3.5.7.9.11": "mmaj13",
"0.2.3.5.7.8.11": "mmaj11b13",
"0.1.3.7.11": "mmaj7b9",
"0.1.3.7.9.11": "mmaj7b9(add13)",
"0.1.3.7.8.11": "mmaj7b9b13",
"0.1.3.6.7.11": "mmaj7b9#11",
"0.1.3.6.7.9.11": "mmaj13b9#11",
"0.1.3.6.7.8.11": "mmaj7b9#11b13",
"0.1.3.5.7.11": "mmaj11b9",
"0.1.3.5.7.9.11": "mmaj13b9",
"0.1.3.5.7.8.11": "mmaj11b9b13",
"0.3.7.10": "m7",
"0.3.7.9.10": "m7(add13)",
"0.3.7.8.10": "m7b13",
"0.3.6.7.10": "m7#11",
"0.3.6.7.9.10": "m7#11(add13)",
"0.3.6.7.8.10": "m7#11b13",
"0.3.5.7.10": "m7(add11)",
"0.3.5.7.9.10": "m7(add11)(add13)",
"0.3.5.7.8.10": "m7(add11)b13",
"0.3.3.7.10": "m7#9",
"0.3.3.7.9.10": "m7#9(add13)",
"0.3.3.7.8.10": "m7#9b13",
"0.3.3.6.7.10": "m7#9#11",
"0.3.3.6.7.9.10": "m13#9#11",
"0.3.3.6.7.8.10": "m7#9#11b13",
"0.3.3.5.7.10": "m11#9",
"0.3.3.5.7.9.10": "m13#9",
"0.3.3.5.7.8.10": "m11#9b13",
"0.2.3.7.10": "m9",
"0.2.3.7.9.10": "m9(add13)",
"0.2.3.7.8.10": "m9b13",
"0.2.3.6.7.10": "m9#11",
"0.2.3.6.7.9.10": "m13#11",
"0.2.3.6.7.8.10": "m9#11b13",
"0.2.3.5.7.10": "m11",
"0.2.3.5.7.9.10": "m13",
"0.2.3.5.7.8.10": "m11b13",
"0.1.3.7.10": "m7b9",
"0.1.3.7.9.10": "m7b9(add13)",
"0.1.3.7.8.10": "m7b9b13",
"0.1.3.6.7.10": "m7b9#11",
"0.1.3.6.7.9.10": "m13b9#11",
"0.1.3.6.7.8.10": "m7b9#11b13",
"0.1.3.5.7.10": "m11b9",
"0.1.3.5.7.9.10": "m13b9",
"0.1.3.5.7.8.10": "m11b9b13",
	}
	
	var text = indices.join(".");
	var quality = compressed_integer_chord_patterns[text];
	return quality;
	
}

function cycle_permute(array) {
	"use strict";
	// Move first element of the array to the end.
	var i;
	var len = array.length;
	var first_element = array[0];
	var new_array = [];
	for (i = 1; i < array.length; i++) {
		new_array.push(array[i]);
	}
	new_array.push(first_element);
	
	return new_array;
}

function sort_array(array) {
	"use strict";
	return array;
}

function naturalize_chord_pattern(pattern) {
	"use strict";
	var i, note;
	var tonic_index = pattern[0];
	for (i = 0; i < pattern.length; i++) {
		note = pattern[i];
		
		if (note < tonic_index) {
			note += 12;
		}
		
		pattern[i] = note - tonic_index;
	}
	
	return pattern;
}

function initPage() {
	"use strict";
	
	var pitch_indices = { "G#0": 0, "A0": 1, "A#0": 2, "B0": 3,
		"C1": 4, "C#1": 5, "D1": 6, "D#1": 7, "E1": 8, "F1": 9, "F#1": 10,
		"G1": 11, "G#1": 12, "A1": 13, "A#1": 14, "B1": 15,
		"C2": 16, "C#2": 17, "D2": 18, "D#2": 19, "E2": 20, "F2": 21, "F#2": 22,
		"G2": 23, "G#2": 24, "A2": 25, "A#2": 26, "B2": 27,
		"C3": 28, "C#3": 29, "D3": 30, "D#3": 31, "E3": 32, "F3": 33, "F#3": 34,
		"G3": 35, "G#3": 36, "A3": 37, "A#3": 38, "B3": 39,
		"C4": 40, "C#4": 41, "D4": 42, "D#4": 43, "E4": 44, "F4": 45, "F#4": 46,
		"G4": 47, "G#4": 48, "A4": 49, "A#4": 50, "B4": 51,
		"C5": 52, "C#5": 53
		};

	var pitch_array = ["G#0", "A0", "A#0", "B0",
					   "C1", "C#1", "D1", "D#1", "E1", "F1", "F#1", "G1", "G#1", "A1", "A#1", "B1",
					   "C2", "C#2", "D2", "D#2", "E2", "F2", "F#2", "G2", "G#2", "A2", "A#2", "B2",
					   "C3", "C#3", "D3", "D#3", "E3", "F3", "F#3", "G3", "G#3", "A3", "A#3", "B3",
					   "C4", "C#4", "D4", "D#4", "E4", "F4", "F#4", "G4", "G#4", "A4", "A#4", "B4",
					   "C5", "C#5"];
	
	var chromatic_octave = ["G#", "A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G"];
	
	var chromatic_indices = { "G#": 0, "A": 1, "A#": 2, "B": 3,
		"C": 4, "C#": 5, "D": 6, "D#": 7, "E": 8, "F": 9, "F#": 10,
		"G": 11};
	
	// G6sus4 == Cadd9
	// AMin = Eaugsus4
	// Dm7b5 = Fm6
	// C6 = Amin7
	// Ddim7 = Bdim7 = Fdim7 = G#dim7
	// Dm11 = FMaj13
	// A9sus4 = Em7add11 = G6add9
	
	function do_something(e) {
		if (e.target !== e.currentTarget) {
			read_chord();
		}
		e.stopPropagation();
	}
	
	var checkbox_container = document.getElementById("checkbox_container");
	checkbox_container.addEventListener("change", do_something, false);
}

window.onload = initPage;